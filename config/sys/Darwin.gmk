#
# ------ Darwin ------ gcc 4.0
# 
ifeq ($(VGM_SYSTEM),Darwin)
  CXX       := g++
  CXXFLAGS  := -Wall -ansi -pedantic -Wno-non-virtual-dtor -Wno-long-long
  CXXFLAGS  += -Wwrite-strings -Wpointer-arith -Woverloaded-virtual -pipe
  ifdef VGM_OPTIMISE
    CXXFLAGS  += -O
    FCFLAGS   := -O
    CCFLAGS   := -O
  else
    ifdef VGM_DEBUG
      CXXFLAGS  += -g 
      FCFLAGS   := -g 
      CCFLAGS   := -g
    endif
  endif
  ifdef VGM_PROFILE
    CXXFLAGS  += -pg
    FCFLAGS   += -pg
    CCFLAGS   += -pg
  endif
  VGM_RUNPATHOPTION := -Wl,-rpath 
  FC := g77
  FCLIBS := -lg2c -lnsl
  ECHO    := /bin/echo -e
#  SHEXT   := so
  SHEXT   := dylib
  X11FLAGS  := -I/usr/include/X11/extensions -I/usr/include/X11
  X11LIBS   := -L/usr/X11R6/lib  -lXmu -lXt -lXext -lX11 -lSM -lICE
  XMFLAGS   := -I/usr/X11R6/include
  XMLIBS    := -lXm -lXpm
  DLDLIBS   := -ldl
  ifndef OGLFLAGS
    ifneq ($(OGLHOME), /usr) 
      OGLFLAGS  := -I$(OGLHOME)/include 
    endif  
  endif
  ifndef OGLLIBS
    OGLLIBS   := -L$(OGLHOME)/lib -lGLU -lGL
  endif
  OIVFLAGS  += -I$(OIHOME)/include 
  VGM_USE_STD_NAMESPACE := yes
  CPPFLAGS += -DVGM_USE_STD_NAMESPACE


#
#  There are two ways to build shared libs (.dylib) on MacOSX.
# Up to now the "flat_namespace" option had been used ; but
# due to the fact that Apple promotes now the "two_level_namespace"
# way of doing, we had tried to build the shared libs in this way.
#  But it appears that for the moment this option induces
# unresolved early crashes at runtim. These crashes are
# probably due to a problem in the sequence of execution 
# of constructor of static objects that are now heavily 
# used in Geant4.
#  Waiting a solution to that, we put the "flat_namespace"
# way of doing as the default to build the .dylib (knowing
# that it is anyway not a long term solution).
#   G.Barrand (16/07/2004)
#

VGM_MACOSX_TWO_LEVEL_NAMESPACE = 1

ifdef VGM_MACOSX_TWO_LEVEL_NAMESPACE
  define build-granular-shared-lib
    @libdir=`(cd $(@D);/bin/pwd)`; \
     cd $(VGM_TMPDIR); \
     g++ -dynamiclib -twolevel_namespace -undefined define_a_way -dynamic \
         -single_module -o $$libdir/$(@F) *.o \
         -L$(CLHEP_BASE_DIR)/lib -lCLHEP $(INTYLIBS)
  endef
else
  define build-granular-shared-lib
    @libdir=`(cd $(@D);/bin/pwd)`; \
     cd $(VGM_TMPDIR); \
     g++ -dynamiclib -flat_namespace -undefined suppress  -dynamic -single_module -o $$libdir/$(@F) $(INTYLIBS) *.o
  endef
endif

ifdef VGM_MACOSX_TWO_LEVEL_NAMESPACE
  define build-global-shared-lib
    libdir=`(cd $(@D);/bin/pwd)`; \
     cd $(VGM_TMP)/$(VGM_SYSTEM); \
     g++ -dynamiclib -twolevel_namespace -undefined error -dynamic \
         -single_module -o $$libdir/$(@F) \
         $(foreach dir,$(SUBLIBS),$(dir)/*.o) \
         $(patsubst lib%,-l%,$(patsubst %.lib,%,$(GLOBLIBS))) \
         -L$(CLHEP_BASE_DIR)/lib -lCLHEP $(INTYLIBS);
  endef
else
  define build-global-shared-lib
    @libdir=`(cd $(@D);/bin/pwd)`; \
     cd $(VGM_TMP)/$(VGM_SYSTEM); \
     g++ -dynamiclib -flat_namespace -undefined suppress  -dynamic -single_module -o $$libdir/$(@F) $(INTYLIBS) $(foreach dir,$(SUBLIBS),$(dir)/*.o);
  endef
endif


endif
